
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由亚萌智能表单代码生成工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。除非此项目不再使用代码生成器生成。
//     如果想修改此文件的方法，请在此文件的上级目录中的ShortcutDAL重写(override)该方法。
//     如有问题联系zongeasy@qq.com
//
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using Yamon.Framework.DBUtility;
using System.Collections;
using Yamon.Framework.Common.DataBase;
using Yamon.Framework.Common;
using Yamon.Framework.Common.IO;
using System.IO;
using System.Linq.Expressions;
using Yamon.Framework.DAL;
using Yamon.Module.UCenter.Entity;

namespace Yamon.Module.UCenter.DAL
{
    /// <summary>
    /// 快捷菜单模型实体类
    ///</summary>
    public partial class _ShortcutDAL : BaseModelDAL<Shortcut>
    {
        public _ShortcutDAL():base("UCenter")
        {
        }

		/// <summary>
        /// 链接类型（LinkType）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_LinkType
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("0", "自定义菜单");
                nv.Add("2", "信息资源");
                return nv;

			}
		}




		/// <summary>
		/// 获取分页的数据实体列表
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
		public virtual List<Shortcut> GetEntityListByPage(out int totalRows,MyNameValueCollection nv = null, int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql(nv, "", out searchParams);
			string fields="LinkID,LinkType,LinkName,LinkUrl,LinkMenuID";
			return GetEntityListByPage("1=1 "+ where, searchParams,order,fields, rows,page,topN,out totalRows);
		}

		/// <summary>
		/// 获取分页的数据列表DataTable
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
		public virtual DataTable GetEntityTableByPage(out int totalRows,MyNameValueCollection nv = null, int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql(nv, "", out searchParams);
			string fields="LinkID,LinkType,LinkName,LinkUrl,LinkMenuID";
			return GetEntityTableByPage("1=1 "+ where, searchParams,order,fields,rows,page,topN,out totalRows);
		}

		/// <summary>
        /// 拼接查询Sql语句及参数
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="notIn">排除字段</param>
        /// <param name="arrParam">out查询参数</param>
        /// <returns>查询Sql语句</returns>
		public virtual string GetSearchSql(MyNameValueCollection nv,string notIn,out object[] arrParam)
		{
			StringBuilder sb=new StringBuilder();
			string value="";
			string value1 = "";
			string value2 = "";
			ArrayList param=new ArrayList();
			if (nv == null)
			{
				arrParam=param.ToArray();
				return sb.ToString();
			}
			arrParam=param.ToArray();
			return sb.ToString();

		}
    
		/// <summary>
        /// 设置新建页面的快捷菜单模型实体(Shortcut)默认值
        /// </summary>
        /// <param name="model">快捷菜单模型实体(Shortcut)</param>
        /// <returns>快捷菜单模型实体(Shortcut)</returns>
		public virtual Shortcut GetCreateFormDefaultValue()
		{
            Shortcut model = new Shortcut();
			model.UserID=CookieHelper.GetCookieInt("UserID");
			model.LinkType=0;
            return model;
		}

		/// <summary>
        /// 设置编辑页面的快捷菜单模型实体(Shortcut)默认值
        /// </summary>
        /// <param name="model">快捷菜单模型实体(Shortcut)</param>
        /// <returns>快捷菜单模型实体(Shortcut)</returns>
		public virtual Shortcut GetEditFormDefaultValue(Shortcut model)
		{
			return model;
		}

		/// <summary>
        /// 设置新增入库时快捷菜单模型实体(Shortcut)默认值
        /// </summary>
        /// <param name="model">快捷菜单模型实体(Shortcut)</param>
        /// <returns>快捷菜单模型实体(Shortcut)</returns>
		public virtual Shortcut GetInsertModelValue(Shortcut model,MyNameValueCollection nv)
		{
			model.LinkID =null;
			model.UserID =CookieHelper.GetCookieInt("UserID");
			return model;
		}

		/// <summary>
        /// 设置更新入库时快捷菜单模型实体(Shortcut)默认值
        /// </summary>
        /// <param name="model">快捷菜单模型实体(Shortcut)</param>
        /// <returns>快捷菜单模型实体(Shortcut)</returns>
		public virtual Shortcut UpdateModelValue(Shortcut model,MyNameValueCollection nv)
		{
			model.UserID =null;
			return model;
		}
	    public virtual Shortcut GetModelValue(Shortcut model)
        {
            return model;
        }
		/// <summary>
        /// 设置快捷菜单模型实体(Shortcut)的显示值
        /// </summary>
        /// <param name="model">快捷菜单模型实体(Shortcut)</param>
        /// <returns>快捷菜单模型实体(Shortcut)</returns>
		public virtual Shortcut GetModelShowValue(Shortcut model,bool clearValue=false)
        {
            model=GetModelValue(model);
			if (model.LinkType!=null)
			{
				model.LinkType_ShowValue=NameValue_LinkType.Get(model.LinkType.ToString());
			}
			if(clearValue)
			{
				model.LinkType = null;
			}
			return model;
		}
		
		/// <summary>
        /// 设置快捷菜单模型实体(Shortcut)的列表显示值
        /// </summary>
        /// <param name="model">快捷菜单模型实体(Shortcut)</param>
        /// <returns>快捷菜单模型实体(Shortcut)</returns>
		public virtual Shortcut GetModelGridShowValue(Shortcut model){
			model=GetModelShowValue(model);
			return model;
        }

        public virtual Shortcut GetInfoByID(object id){
            Shortcut model = GetModelByID(id);
            model = GetModelShowValue(model);
            return model;
        } 




		/// <summary>
        /// 编辑数据格式验证
        /// </summary>
        /// <param name="model">快捷菜单模型实体(Shortcut)</param>
        public virtual void EditFormValidator(Shortcut model)
        {
			string value="";
        }



		/// <summary>
        /// 新建数据格式验证
        /// </summary>
        /// <param name="model">快捷菜单模型实体(Shortcut)</param>
        public virtual void CreateFormValidator(Shortcut model)
        {
			string value="";
        }

		/// <summary>
        /// 从DataSet中导入数据
        /// </summary>
        /// <param name="ds">DataSet</param>
        /// <returns>影响的行数</returns>
		public int ImportDataFromDataSet(DataSet ds)
		{
			if (ds.Tables.Count > 0)
			{
				DataTable dt=ds.Tables[0];
				if (dt.Columns.Contains("编号"))
				{
					dt.Columns["编号"].ColumnName = "LinkID";
				}
				if (dt.Columns.Contains("所属用户"))
				{
					dt.Columns["所属用户"].ColumnName = "UserID";
				}
				if (dt.Columns.Contains("链接类型"))
				{
					dt.Columns["链接类型"].ColumnName = "LinkType";
				}
				if (dt.Columns.Contains("链接名称"))
				{
					dt.Columns["链接名称"].ColumnName = "LinkName";
				}
				if (dt.Columns.Contains("链接地址"))
				{
					dt.Columns["链接地址"].ColumnName = "LinkUrl";
				}
				if (dt.Columns.Contains("链接菜单"))
				{
					dt.Columns["链接菜单"].ColumnName = "LinkMenuID";
				}
				for (int i = 0; i < dt.Rows.Count; i++)
				{
					if (dt.Columns.Contains("LinkType"))
					{
						if (dt.Rows[i]["LinkType"].ToString()!="")
						{
							dt.Rows[i]["LinkType"] = NameValue_LinkType.GetKeyByValue(dt.Rows[i]["LinkType"].ToString());
						}
					}
				}
				ImportDataFromDataTable(dt);

			}
			return 0;
		}

    }
}
