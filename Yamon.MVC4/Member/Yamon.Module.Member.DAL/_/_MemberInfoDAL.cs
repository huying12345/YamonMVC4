
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由亚萌智能表单代码生成工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。除非此项目不再使用代码生成器生成。
//     如果想修改此文件的方法，请在此文件的上级目录中的MemberInfoDAL重写(override)该方法。
//     如有问题联系zongeasy@qq.com
//
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.ComponentModel;
using Yamon.Framework.DBUtility;
using System.Collections;
using Yamon.Framework.Common.DataBase;
using Yamon.Framework.Common;
using Yamon.Framework.Common.IO;
using System.IO;
using System.Linq.Expressions;
using Yamon.Framework.DAL;
using Yamon.Module.Member.Entity;

namespace Yamon.Module.Member.DAL
{
    /// <summary>
    /// 会员实体类
    ///</summary>
    public partial class _MemberInfoDAL : BaseModelDAL<MemberInfo>
    {
        public _MemberInfoDAL():base("UCenter")
        {
        }

		/// <summary>
        /// 会员等级（MemberGradeId）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_MemberGradeId
		{
			get
			{
			    Yamon.Module.Member.DAL.MemberGradeDAL dal = new Yamon.Module.Member.DAL.MemberGradeDAL();
                string cacheKey = dal.CacheKeyPrefix + "NameValue_MemberGrade";
                object obj=CacheHelper.Get(cacheKey);
                if (obj == null)
                {
                   obj= dal.GetAllEntityTable("MemberGradeId,GradeName").ToNameValueCollection();
                   CacheHelper.Insert(cacheKey,obj);
                }
                return (MyNameValueCollection) obj;

			}
		}
		/// <summary>
        /// 性别（Sex）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_Sex
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("0", "男");
                nv.Add("1", "女");
                return nv;

			}
		}
		/// <summary>
        /// 证件类型（IdentityType）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_IdentityType
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("身份证", "身份证");
                nv.Add("驾驶证", "驾驶证");
                nv.Add("工作证", "工作证");
                nv.Add("户口本", "户口本");
                nv.Add("军官证", "军官证");
                nv.Add("护照", "护照");
                nv.Add("其它", "其它");
                return nv;

			}
		}
		/// <summary>
        /// 会员状态（MemberState）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_MemberState
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("1", "正常");
                nv.Add("2", "禁用");
                nv.Add("3", "注销");
                return nv;

			}
		}




		/// <summary>
		/// 获取分页的数据实体列表
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
		public virtual List<MemberInfo> GetEntityListByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="MemberInfoId,MemberNo,MemberGradeId,MemberName,Sex,LeavingDealTimes,Bonus,MobileNo,Email,IdentityType,BirthdayYear,BirthdayMonthDay,BirthdayType,Address,Company,RegDate,ValidityDate,MemberState,RecommendMemberNo,UpdateTime,CreateTime,Comment";
			return GetEntityListByPage("1=1 "+ where, searchParams,order,fields, rows,page,topN,out totalRows);
		}

		/// <summary>
		/// 获取分页的数据列表DataTable
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
		public virtual DataTable GetEntityTableByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="MemberInfoId,MemberNo,MemberGradeId,MemberName,Sex,LeavingDealTimes,Bonus,MobileNo,Email,IdentityType,BirthdayYear,BirthdayMonthDay,BirthdayType,Address,Company,RegDate,ValidityDate,MemberState,RecommendMemberNo,UpdateTime,CreateTime,Comment";
			return GetEntityTableByPage("1=1 "+ where, searchParams,order,fields,rows,page,topN,out totalRows);
		}

		/// <summary>
        /// 拼接查询Sql语句及参数
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="notIn">排除字段</param>
        /// <param name="arrParam">out查询参数</param>
        /// <returns>查询Sql语句</returns>
		public virtual string GetSearchSql(string notIn,out object[] arrParam)
		{
			StringBuilder sb=new StringBuilder();
			string value="";
			string value1 = "";
			string value2 = "";
			ArrayList param=new ArrayList();
			
			
			//MemberNo
			if (!("," + notIn.ToLower() + ",").Contains(",memberno,"))
			{
			value = RequestHelper.GetString("MemberNo");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			       		sb.Append(" AND [`MemberNo`] like ?");
			       		param.Add("%"+ arrValue[i]+"%");
			        }
			    }
			    else
			    {
			          sb.Append(" AND [`MemberNo`] like ?");
			          param.Add("%"+ value+"%");
			    }
			}
			}
			
			
			//MemberGradeId
			if (!("," + notIn.ToLower() + ",").Contains(",membergradeid,"))
			{
				value = RequestHelper.GetString("MemberGradeId");
				if (!string.IsNullOrEmpty(value))
				{
				 sb.Append(" AND [`MemberGradeId`]=?");
				  param.Add(value);
				}
			}
			
			
			//MemberName
			if (!("," + notIn.ToLower() + ",").Contains(",membername,"))
			{
			value = RequestHelper.GetString("MemberName");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			       		sb.Append(" AND [`MemberName`] like ?");
			       		param.Add("%"+ arrValue[i]+"%");
			        }
			    }
			    else
			    {
			          sb.Append(" AND [`MemberName`] like ?");
			          param.Add("%"+ value+"%");
			    }
			}
			}
			
			
			//CreateTime
			if (!("," + notIn.ToLower() + ",").Contains(",createtime,"))
			{
					 value1 = RequestHelper.GetString("CreateTime_Start");
					 value2 = RequestHelper.GetString("CreateTime_End");
			    if (!string.IsNullOrEmpty(value1))
			    {
			      sb.Append(" AND [`CreateTime`] >=?");
			      param.Add(value1);
			    }
			    if (!string.IsNullOrEmpty(value2))
			    {
			      sb.Append(" AND [`CreateTime`] <=?");
			      param.Add(value2);
			    }
			}
			arrParam=param.ToArray();
			return sb.ToString();

		}

		
	    public virtual MemberInfo GetModelValue(MemberInfo model)
        {
            return model;
        }
		/// <summary>
        /// 设置会员实体(MemberInfo)的显示值
        /// </summary>
        /// <param name="model">会员实体(MemberInfo)</param>
        /// <returns>会员实体(MemberInfo)</returns>
		public virtual MemberInfo GetModelShowValue(MemberInfo model,bool clearValue=false)
        {
            model=GetModelValue(model);
			if (model.MemberGradeId!=null)
			{
				model.MemberGradeId_ShowValue=NameValue_MemberGradeId.Get(model.MemberGradeId.ToString());
			}
			if (model.Sex!=null)
			{
				model.Sex_ShowValue=NameValue_Sex.Get(model.Sex.ToString());
			}
			if (model.IdentityType!=null)
			{
				model.IdentityType_ShowValue=NameValue_IdentityType.Get(model.IdentityType.ToString());
			}
			if (model.MemberState!=null)
			{
				model.MemberState_ShowValue=NameValue_MemberState.Get(model.MemberState.ToString());
			}
			if(clearValue)
			{
				model.MemberGradeId = null;
				model.Sex = null;
				model.IdentityType = null;
				model.MemberState = null;
			}
			return model;
		}
		
		/// <summary>
        /// 设置会员实体(MemberInfo)的列表显示值
        /// </summary>
        /// <param name="model">会员实体(MemberInfo)</param>
        /// <returns>会员实体(MemberInfo)</returns>
		public virtual MemberInfo GetModelGridShowValue(MemberInfo model){
			model=GetModelShowValue(model);
			return model;
        }

        public virtual MemberInfo GetInfoByID(object id){
            MemberInfo model = GetModelByID(id);
            model = GetModelShowValue(model);
            return model;
        } 


      #region 新建相关方法
		/// <summary>
        /// 设置新增入库时会员实体(MemberInfo)默认值
        /// </summary>
        /// <param name="model">会员实体(MemberInfo)</param>
        /// <returns>会员实体(MemberInfo)</returns>
		public virtual MemberInfo GetInsertModelValue(MemberInfo model)
		{
			model.MemberInfoId =null;
			model.MemberPassword = Yamon.Framework.Common.Encrypt.MD5Encrypt.Encrypt(model.MemberPassword);
			model.RegDate =(DateTime.Now);
			model.MemberState =("1");
			model.UpdateTime =(DateTime.Now);
			model.CreateTime =(DateTime.Now);
			return model;
		}		/// <summary>
        /// 设置新建页面的会员实体(MemberInfo)默认值
        /// </summary>
        /// <param name="model">会员实体(MemberInfo)</param>
        /// <returns>会员实体(MemberInfo)</returns>
		public virtual MemberInfo GetCreateFormDefaultValue()
		{
            MemberInfo model = new MemberInfo();
			model.MemberGradeId=3;
			model.RegDate=(DateTime.Now);
			model.MemberState=("1");
            return model;
		}

		/// <summary>
        /// 新建数据格式验证
        /// </summary>
        /// <param name="model">会员实体(MemberInfo)</param>
        public virtual void CreateFormValidator(MemberInfo model)
        {
			string value="";
			
			//MemberNo验证
			value = model.MemberNo!=null ? model.MemberNo.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("会员编号不能为空！");
		            }
            if (!string.IsNullOrEmpty(value)&&ExistsByField("MemberNo",value))
            {
                throw new Exception(string.Format("会员编号为({0})已存在！", value));
            }
			
			//MemberName验证
			value = model.MemberName!=null ? model.MemberName.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("姓名不能为空！");
		            }
			
			//MemberPassword验证
			value = model.MemberPassword!=null ? model.MemberPassword.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("密码不能为空！");
		            }
			
			//MobileNo验证
			value = model.MobileNo!=null ? model.MobileNo.ToString() : "";
            if (!string.IsNullOrEmpty(value)&&ExistsByField("MobileNo",value))
            {
                throw new Exception(string.Format("手机号为({0})已存在！", value));
            }
}
      #endregion

      #region 修改相关方法
		/// <summary>
        /// 设置更新入库时会员实体(MemberInfo)默认值
        /// </summary>
        /// <param name="model">会员实体(MemberInfo)</param>
        /// <returns>会员实体(MemberInfo)</returns>
		public virtual MemberInfo GetUpdateModelValue(MemberInfo model)
		{
            model.MemberPassword = model.MemberPassword == "**********"?null:Yamon.Framework.Common.Encrypt.MD5Encrypt.Encrypt(model.MemberPassword);
			model.UpdateTime = (DateTime.Now);
			return model;
		}		/// <summary>
        /// 设置编辑页面的会员实体(MemberInfo)默认值
        /// </summary>
        /// <param name="model">会员实体(MemberInfo)</param>
        /// <returns>会员实体(MemberInfo)</returns>
		public virtual MemberInfo GetEditFormDefaultValue(MemberInfo model)
		{
			return model;
		}

		/// <summary>
        /// 编辑数据格式验证
        /// </summary>
        /// <param name="model">会员实体(MemberInfo)</param>
        public virtual void EditFormValidator(MemberInfo model)
        {
			string value="";
			
			//MemberNo验证
			value = model.MemberNo!=null ? model.MemberNo.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("会员编号不能为空！");
		            }
            if (!string.IsNullOrEmpty(value)&&ExistsByField("MemberNo",value,model.MemberInfoId))
            {
                throw new Exception(string.Format("会员编号为({0})已存在！", value));
            }
			
			//MemberName验证
			value = model.MemberName!=null ? model.MemberName.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("姓名不能为空！");
		            }
			
			//MemberPassword验证
			value = model.MemberPassword!=null ? model.MemberPassword.ToString() : "";
                    if (model.MemberPassword=="")
                    {
                     throw new Exception("密码不能为空！");
                    }
			
			//MobileNo验证
			value = model.MobileNo!=null ? model.MobileNo.ToString() : "";
            if (!string.IsNullOrEmpty(value)&&ExistsByField("MobileNo",value,model.MemberInfoId))
            {
                throw new Exception(string.Format("手机号为({0})已存在！", value));
            }
}
      #endregion

    }
}
