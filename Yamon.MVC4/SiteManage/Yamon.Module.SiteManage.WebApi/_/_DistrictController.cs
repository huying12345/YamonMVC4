
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由亚萌智能表单代码生成工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。除非此项目不再使用代码生成器生成。
//     如果想修改此文件的方法，请在此文件的上级目录中的DistrictController重写(override)该方法。
//     如有问题联系zongeasy@qq.com
//
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Collections;
using System.IO;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using Yamon.Framework.DAL;
using Yamon.Module.SiteManage.Entity;
using Yamon.Module.SiteManage.Entity;
using Yamon.Module.SiteManage.DAL;
using Newtonsoft.Json;
using Yamon.Framework.Common;
using Yamon.Module.SiteManage.DAL;
using Yamon.Module.UCenter.DAL;
using Yamon.Framework.Common.IO;
using Yamon.Framework.MVC;
using Yamon.Module.Common;
using Yamon.Framework.NPOI;




namespace Yamon.Module.SiteManage.WebApi
{
    /// <summary>
    /// 区域
    /// </summary>
    public partial class _DistrictController :BaseController
    {

        public DistrictDAL dal = new DistrictDAL();

        public virtual ActionResult AsyncTreeGrid()
        {
             return AsyncTreeGridByFilterID("");
        } 
        public virtual ActionResult AsyncEditTree()
        {
             return AsyncTreeJsonByFilterID("");
        } 
        


        [ValidateInput(false)]
        [LogFilter]
        public virtual ActionResult Create(District model,bool returnData=false)
        {
            object newId = "";
            try
            {
                model = dal.GetInsertModelValue(model);
                dal.CreateFormValidator(model);
                int result = dal.InsertByModel(model);
                hash["success"] = result > 0;
                if (result > 0)
                {
                            newId = dal.GetMaxID()-1;

                    hash["id"] = newId;
                    if(returnData){
                        District newrow = dal.GetModelByID(newId);
                        hash["data"] = newrow;
                    }
                }
               
            }
            catch (Exception ex)
            {
                hash["message"] = ex.Message;
            }
            return Content(JsonConvert.SerializeObject(hash));
        }        [ValidateInput(false)]
        [LogFilter]
        public virtual ActionResult Edit(District model,bool returnData=false)
        {
            try
            {
                model = dal.GetUpdateModelValue(model);
                dal.EditFormValidator(model);
                int result = dal.UpdateByModel(model);
                hash["success"] = result > 0 ;
               if (result > 0)
                {
                    hash["id"] = model.ID;
                    if(returnData){
                        District newrow = dal.GetModelByID(model.ID);
                        hash["data"] = newrow;
                    }
                }
            }
            catch (Exception ex)
            {
                hash["message"] = ex.Message;
            }
            return Content(JsonConvert.SerializeObject(hash));
		}

        [NonAction]        
        public  virtual List<District> GetGridList(string filterId, int showValue, out int totalRows)
        {
            totalRows = 0;
            string sort = RequestHelper.NameValue.GetString("sort").Replace("_ShowValue","");
            string order = RequestHelper.NameValue.GetString("order");
            int page = RequestHelper.NameValue.GetInt("page");
            int rows = RequestHelper.NameValue.GetInt("rows", 20);
            if (string.IsNullOrEmpty(sort))
            {
                sort = "ID";
            }
            if (string.IsNullOrEmpty(order))
            {
                order = "asc";
            }
            string orderby = sort + " " + order;
            List<District> modelList = new List<District>();
            switch(filterId)
            {

                default:
                    {
                    modelList = dal.GetEntityListByPage(out totalRows,0,page,rows,orderby);
                    break;
                    }
            }
            if (showValue == 0)
            {
                return modelList;
            }
            return  modelList.Select(model => dal.GetModelGridShowValue(model)).ToList();
        }
        [NonAction]
        public  virtual ActionResult GridByFilterID(string filterId)
        {
            filterId = string.IsNullOrEmpty(filterId)?"":filterId;
            try
            {
                int totalRows = 0;
                filterId = string.IsNullOrEmpty(filterId) ? "" : filterId;
                hash["rows"] = GetGridList(filterId, 1, out totalRows);
                hash["total"] = totalRows;
                hash["success"] = true;
            }
            catch (Exception ex)
            {
                hash["success"] = false;
                hash["message"] = ex.Message;
                hash["rows"] = new List<District>();
            }
            return Content(JsonConvert.SerializeObject(hash)); 
        }

        [NonAction]
		public  virtual ActionResult TreeGridByFilterID(string filterId)
        {
            StringBuilder _jsonsb = new StringBuilder();
            try
            {
                filterId = string.IsNullOrEmpty(filterId)?"":filterId;
                int _totalRows = 0;
                string sort = RequestHelper.GetString("sort").Replace("_ShowValue","");
                string order = RequestHelper.GetString("order");
                int page = RequestHelper.GetInt("page");
                int rows = 0;
                if (string.IsNullOrEmpty(sort))
                {
                    sort = "ID";
                }
                if (string.IsNullOrEmpty(order))
                {
                    sort = "asc";
                }
                string orderby = sort + " " + order;
                List<District> modelList = new List<District>();
                switch(filterId)
                {

                     default:
                     {
                        modelList = dal.GetEntityListByPage(out _totalRows,0,page,rows);
                        break;
                     }
				}
               List<District> newModelList = modelList.Select(model => dal.GetModelGridShowValue(model)).ToList();
                _totalRows=modelList.Count;
                newModelList = dal.ModelListToTree(newModelList);
                _jsonsb.Append("{\"total\":" + _totalRows + ",\"rows\":");
                _jsonsb.Append(JsonConvert.SerializeObject(newModelList));
                _jsonsb.Append("}");
            }
            catch (Exception ex)
            {
                _jsonsb = new StringBuilder();
                _jsonsb.Append("{\"total\":\"-1\",\"msg\":" + StringHelper.ToJson(ex.Message) + ",\"rows\":[]}");
            }
            return Content(_jsonsb.ToString());
        }
        [NonAction]
        public  virtual ActionResult TreeJsonByFilterID(string filterId)
        {
            StringBuilder _jsonsb = new StringBuilder();
            try
            {
                DataTable table;
                filterId = string.IsNullOrEmpty(filterId)?"":filterId;
                string value = RequestHelper.GetString("Value");
                string fields="ID,Name,ParentID,OrderID";
                string[] attributes = RequestHelper.GetString("Attributes").Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if(attributes.Length>0){
                     fields += "," + string.Join(",", attributes);
                }
                switch(filterId)
                {

                     default:
                     {
                        table = dal.GetAllEntityTable(fields);
                        break;
                     }
                }
                TreeHelper treeHelper = new TreeHelper("ID", "Name", "OrderID", "ParentID");

                string append="";
                int iscombo = RequestHelper.GetRequestInt("iscombo", 0);
                string rootName = RequestHelper.GetRequestString("RootName");
                rootName=StringHelper.ToJson(rootName);
                if (iscombo == 1)
                {
                    append="{\"id\":\"0\",\"text\":\"根目录\"},";
                }
                else if(iscombo==0)
                {
                    append="{\"id\":\"0\",\"text\":\"请选择\"},";
                }else if(iscombo==2)
                {
                    append="{\"id\":\"0\",\"text\":"+rootName+"},";
                }
                string json= treeHelper.GetTreeJson(table, 0, value, append, attributes);
                _jsonsb.Append(json);
            }
            catch (Exception ex)
            {
                _jsonsb = new StringBuilder();
                _jsonsb.Append("{\"total\":\"-1\",\"msg\":" + StringHelper.ToJson(ex.Message) + ",\"rows\":[]}");
            }
            return Content(_jsonsb.ToString());
        }
        
		public  virtual ActionResult AsyncTreeGridByFilterID(string filterId)
        {
            StringBuilder _jsonsb = new StringBuilder();
            try
            {
                filterId = string.IsNullOrEmpty(filterId)?"":filterId;
                string parentId = RequestHelper.GetString("ParentID");

                List<District> modelList = new List<District>();
                switch(filterId)
                {

					 default:
					 {
						modelList = dal.GetAsyncModelTreeList(parentId);
						break;
					 }
				}
                 List<District> newModelList = modelList.Select(model => dal.GetModelGridShowValue(model)).ToList();
                _jsonsb.Append(JsonConvert.SerializeObject(newModelList));
            }
            catch (Exception ex)
            {
                _jsonsb = new StringBuilder();
                _jsonsb.Append("{\"total\":\"-1\",\"msg\":" + StringHelper.ToJson(ex.Message) + ",\"rows\":[]}");
            }
            return Content(_jsonsb.ToString());
        }

        public  virtual ActionResult AsyncTreeJsonByFilterID(string filterId)
        {
            StringBuilder _jsonsb = new StringBuilder();
            try
            {
                DataTable table;
                filterId = string.IsNullOrEmpty(filterId)?"":filterId;
                string parentId = RequestHelper.GetString("ID");
                string value = RequestHelper.GetString("Value");
                switch(filterId)
                {

                     default:
                     {
                        table = dal.GetAsyncTreeList(parentId,"ID,Name");
                        break;
                     }
                }
                TreeHelper treeHelper = new TreeHelper("ID", "Name", "OrderID", "ParentID");
                string[] attributes = RequestHelper.GetString("Attributes").Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                string append="[";
                if(parentId==""){
                    int iscombo = RequestHelper.GetRequestInt("iscombo", 0);
                    if (iscombo == 1)
                    {
                        append +="{\"id\":\"\",\"text\":\"根目录\"},";
                    }
                    else
                    {
                        append +="{\"id\":\"\",\"text\":\"请选择\"},";
                    }
                }
                append += treeHelper.GetAsyncTreeJson(table, attributes);
                _jsonsb.Append(append);
            }
            catch (Exception ex)
            {
                _jsonsb = new StringBuilder();
                _jsonsb.Append("{\"total\":\"-1\",\"msg\":" + StringHelper.ToJson(ex.Message) + ",\"rows\":[]}");
            }
            return Content(_jsonsb.ToString());
        }
        
        public ActionResult SaveEditTree(int id, string targetId, string point)
        {
            int result = dal.SaveEditTree(id, targetId, point);
            hash["success"] = result > 0;
            return Json(hash);
        }

        public ActionResult SaveEditTreeField(int id, string value)
        {
            int result = dal.UpdateSingleFieldValue("Name", value,id );
            hash["success"] = result > 0;
            return Json(hash);
        }   
    [LogFilter]
    public virtual ActionResult BatchDelete()
    {
        string ids = StringHelper.UrlDecode(RequestHelper.GetRequestString("ids"));
        int result = dal.BatchDeleteByID(ids);
        Hashtable hash = new Hashtable();
        hash["success"] = result > 0;
        hash["message"] = "";
        return Json(hash);
    }

    [LogFilter]
    public virtual ActionResult Delete(string id)
    {
        int result = dal.DeleteByID(id);
        hash["success"] = result > 0;
        hash["message"] = "";
        return Json(hash);
    }
        [CheckPurview(pageCode:"SiteManage_District_Show")]        
        public ActionResult GetEntityByID(string id)
        {
            District model = dal.GetModelByID(id);
            if (model != null)
            {
                hash["data"] = model;
                hash["success"] = true;
            }
            return Content(JsonConvert.SerializeObject(hash));
        }

        [CheckPurview(pageCode:"SiteManage_District_Show")]
        public ActionResult GetInfoByID(string id)
        {
            District model = dal.GetModelByID(id);
            if (model != null)
            {
                model = dal.GetModelShowValue(model);
                hash["success"] = true;
                hash["data"] = model;
            }
           return Content(JsonConvert.SerializeObject(hash));
        }

        [CheckPurview(pageCode:"SiteManage_District_Show")]
        public ActionResult GetModelByID(string id)
        {
            District model = dal.GetModelByID(id);
            if (model != null)
            {
                model = dal.GetModelShowValue(model,true);
                hash["data"] = model;
                hash["success"] = true;
                string json = JsonConvert.SerializeObject(hash);
                json=json.Replace("_ShowValue\":","\":");
                return Content(json);
            }
            return Content(JsonConvert.SerializeObject(hash));
        }




    }
}
