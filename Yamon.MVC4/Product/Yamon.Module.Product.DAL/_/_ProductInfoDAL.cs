
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由亚萌智能表单代码生成工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。除非此项目不再使用代码生成器生成。
//     如果想修改此文件的方法，请在此文件的上级目录中的ProductInfoDAL重写(override)该方法。
//     如有问题联系zongeasy@qq.com
//
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.ComponentModel;
using Yamon.Framework.DBUtility;
using System.Collections;
using Yamon.Framework.Common.DataBase;
using Yamon.Framework.Common;
using Yamon.Framework.Common.IO;
using System.IO;
using System.Linq.Expressions;
using Yamon.Framework.DAL;
using Yamon.Module.Product.Entity;

namespace Yamon.Module.Product.DAL
{
    /// <summary>
    /// 商品实体类
    ///</summary>
    public partial class _ProductInfoDAL : BaseModelDAL<ProductInfo>
    {
        public _ProductInfoDAL():base("UCenter")
        {
        }

		/// <summary>
        /// 商品类型（ProductTypeId）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_ProductTypeId
		{
			get
			{
			    Yamon.Module.Product.DAL.ProductTypeDAL dal = new Yamon.Module.Product.DAL.ProductTypeDAL();
                string cacheKey = dal.CacheKeyPrefix + "NameValue_ProductType";
                object obj=CacheHelper.Get(cacheKey);
                if (obj == null)
                {
                   obj= dal.GetAllEntityTable_Models("ProductTypeId,TypeName").ToNameValueCollection();
                   CacheHelper.Insert(cacheKey,obj);
                }
                return (MyNameValueCollection) obj;

			}
		}



		/// <summary>
		/// 获取数据实体列表(模型过滤)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<ProductInfo> GetEntityList_Models(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] { RequestHelper.GetString("Models") };
            return GetEntityList("1=1 AND Models=? ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据实体列表(模型过滤)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<ProductInfo> GetAllEntityList_Models(string fields="")
        {
            return GetEntityList_Models(0,fields);
        }
		
		/// <summary>
		/// 获取分页的数据实体列表(模型过滤)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
        public virtual List<ProductInfo> GetEntityListByPage_Models(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			   order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] { RequestHelper.GetString("Models") };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="ProductInfoId,ProductTypeId,ProductInfoNo,ProductName,SalePrice,PurchasePrice,StockNum,ExchangeNeedBonus,SaleDiscountPercent,MinDiscountPercent,Comment,UpdateTime,CreateTime";
            return GetEntityListByPage("1=1 AND Models=? "+ where, arrParams,order,fields ,rows,page,topN,out totalRows);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(模型过滤)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetEntityTable_Models(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] { RequestHelper.GetString("Models") };
            return GetEntityTable("1=1 AND Models=? ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(模型过滤)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetAllEntityTable_Models(string fields="")
        {
        	return GetEntityTable_Models(0,fields);
        }
		/// <summary>
		/// 获取分页的数据列表DataTable(模型过滤)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
        public virtual DataTable GetEntityTableByPage_Models(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			    order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] { RequestHelper.GetString("Models") };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="ProductInfoId,ProductTypeId,ProductInfoNo,ProductName,SalePrice,PurchasePrice,StockNum,ExchangeNeedBonus,SaleDiscountPercent,MinDiscountPercent,Comment,UpdateTime,CreateTime";
            return GetEntityTableByPage("1=1 AND Models=? "+ where, arrParams,order,fields, rows,page,topN,out totalRows);
        }

		/// <summary>
		/// 获取分页的数据实体列表
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
		public virtual List<ProductInfo> GetEntityListByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="ProductInfoId,ProductTypeId,ProductInfoNo,ProductName,SalePrice,PurchasePrice,StockNum,ExchangeNeedBonus,SaleDiscountPercent,MinDiscountPercent,Comment,UpdateTime,CreateTime";
			return GetEntityListByPage("1=1 "+ where, searchParams,order,fields, rows,page,topN,out totalRows);
		}

		/// <summary>
		/// 获取分页的数据列表DataTable
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
		public virtual DataTable GetEntityTableByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="ProductInfoId,ProductTypeId,ProductInfoNo,ProductName,SalePrice,PurchasePrice,StockNum,ExchangeNeedBonus,SaleDiscountPercent,MinDiscountPercent,Comment,UpdateTime,CreateTime";
			return GetEntityTableByPage("1=1 "+ where, searchParams,order,fields,rows,page,topN,out totalRows);
		}

		/// <summary>
        /// 拼接查询Sql语句及参数
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="notIn">排除字段</param>
        /// <param name="arrParam">out查询参数</param>
        /// <returns>查询Sql语句</returns>
		public virtual string GetSearchSql(string notIn,out object[] arrParam)
		{
			StringBuilder sb=new StringBuilder();
			string value="";
			string value1 = "";
			string value2 = "";
			ArrayList param=new ArrayList();
			
			
			//ProductTypeId
			if (!("," + notIn.ToLower() + ",").Contains(",producttypeid,"))
			{
				value = RequestHelper.GetString("ProductTypeId");
				if (!string.IsNullOrEmpty(value))
				{
				 sb.Append(" AND [`ProductTypeId`]=?");
				  param.Add(value);
				}
			}
			arrParam=param.ToArray();
			return sb.ToString();

		}

		
	    public virtual ProductInfo GetModelValue(ProductInfo model)
        {
            return model;
        }
		/// <summary>
        /// 设置商品实体(ProductInfo)的显示值
        /// </summary>
        /// <param name="model">商品实体(ProductInfo)</param>
        /// <returns>商品实体(ProductInfo)</returns>
		public virtual ProductInfo GetModelShowValue(ProductInfo model,bool clearValue=false)
        {
            model=GetModelValue(model);
			if (model.ProductTypeId!=null)
			{
				model.ProductTypeId_ShowValue=NameValue_ProductTypeId.Get(model.ProductTypeId.ToString());
			}
			if(clearValue)
			{
				model.ProductTypeId = null;
			}
			return model;
		}
		
		/// <summary>
        /// 设置商品实体(ProductInfo)的列表显示值
        /// </summary>
        /// <param name="model">商品实体(ProductInfo)</param>
        /// <returns>商品实体(ProductInfo)</returns>
		public virtual ProductInfo GetModelGridShowValue(ProductInfo model){
			model=GetModelShowValue(model);
			return model;
        }

        public virtual ProductInfo GetInfoByID(object id){
            ProductInfo model = GetModelByID(id);
            model = GetModelShowValue(model);
            return model;
        } 


      #region 新建相关方法
		/// <summary>
        /// 设置新增入库时商品实体(ProductInfo)默认值
        /// </summary>
        /// <param name="model">商品实体(ProductInfo)</param>
        /// <returns>商品实体(ProductInfo)</returns>
		public virtual ProductInfo GetInsertModelValue(ProductInfo model)
		{
			model.ProductInfoId =null;
			model.ExchangeNeedBonus =0;
			model.SaleDiscountPercent =1;
			model.MinDiscountPercent =1;
			model.UpdateTime =(DateTime.Now);
			model.CreateTime =(DateTime.Now);
			return model;
		}		/// <summary>
        /// 设置新建页面的商品实体(ProductInfo)默认值
        /// </summary>
        /// <param name="model">商品实体(ProductInfo)</param>
        /// <returns>商品实体(ProductInfo)</returns>
		public virtual ProductInfo GetCreateFormDefaultValue()
		{
            ProductInfo model = new ProductInfo();
			model.SalePrice=0;
			model.PurchasePrice=0;
			model.StockNum=0;
			model.ExchangeNeedBonus=0;
			model.SaleDiscountPercent=1;
			model.MinDiscountPercent=1;
			model.UpdateTime=(DateTime.Now);
			model.CreateTime=(DateTime.Now);
            return model;
		}

		/// <summary>
        /// 新建数据格式验证
        /// </summary>
        /// <param name="model">商品实体(ProductInfo)</param>
        public virtual void CreateFormValidator(ProductInfo model)
        {
			string value="";
			
			//ProductTypeId验证
			value = model.ProductTypeId!=null ? model.ProductTypeId.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("商品类型不能为空！");
		            }
			
			//ProductInfoNo验证
			value = model.ProductInfoNo!=null ? model.ProductInfoNo.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("商品编号不能为空！");
		            }
            if (!string.IsNullOrEmpty(value)&&ExistsByField("ProductInfoNo",value))
            {
                throw new Exception(string.Format("商品编号为({0})已存在！", value));
            }
}
      #endregion

      #region 修改相关方法
		/// <summary>
        /// 设置更新入库时商品实体(ProductInfo)默认值
        /// </summary>
        /// <param name="model">商品实体(ProductInfo)</param>
        /// <returns>商品实体(ProductInfo)</returns>
		public virtual ProductInfo GetUpdateModelValue(ProductInfo model)
		{
			model.UpdateTime = (DateTime.Now);
			return model;
		}		/// <summary>
        /// 设置编辑页面的商品实体(ProductInfo)默认值
        /// </summary>
        /// <param name="model">商品实体(ProductInfo)</param>
        /// <returns>商品实体(ProductInfo)</returns>
		public virtual ProductInfo GetEditFormDefaultValue(ProductInfo model)
		{
			model.UpdateTime=(DateTime.Now);
			return model;
		}

		/// <summary>
        /// 编辑数据格式验证
        /// </summary>
        /// <param name="model">商品实体(ProductInfo)</param>
        public virtual void EditFormValidator(ProductInfo model)
        {
			string value="";
			
			//ProductTypeId验证
			value = model.ProductTypeId!=null ? model.ProductTypeId.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("商品类型不能为空！");
		            }
			
			//ProductInfoNo验证
			value = model.ProductInfoNo!=null ? model.ProductInfoNo.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("商品编号不能为空！");
		            }
            if (!string.IsNullOrEmpty(value)&&ExistsByField("ProductInfoNo",value,model.ProductInfoId))
            {
                throw new Exception(string.Format("商品编号为({0})已存在！", value));
            }
}
      #endregion

    }
}
