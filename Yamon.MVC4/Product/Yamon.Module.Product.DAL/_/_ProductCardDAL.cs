
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由亚萌智能表单代码生成工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。除非此项目不再使用代码生成器生成。
//     如果想修改此文件的方法，请在此文件的上级目录中的ProductCardDAL重写(override)该方法。
//     如有问题联系zongeasy@qq.com
//
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.ComponentModel;
using Yamon.Framework.DBUtility;
using System.Collections;
using Yamon.Framework.Common.DataBase;
using Yamon.Framework.Common;
using Yamon.Framework.Common.IO;
using System.IO;
using System.Linq.Expressions;
using Yamon.Framework.DAL;
using Yamon.Module.Product.Entity;

namespace Yamon.Module.Product.DAL
{
    /// <summary>
    ///  体验卡实体类
    ///</summary>
    public partial class _ProductCardDAL : BaseModelDAL<ProductCard>
    {
        public _ProductCardDAL():base("UCenter")
        {
        }

		/// <summary>
        /// 卡类型（CardType）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_CardType
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("4", "会员卡");
                nv.Add("1", "计次卡");
                nv.Add("2", "月卡");
                nv.Add("3", "年卡");
                return nv;

			}
		}
		/// <summary>
        /// 状态（Status）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_Status
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("Normal", "正常");
                nv.Add("Loss", "挂失");
                nv.Add("CardBacked", "已退卡");
                return nv;

			}
		}
		/// <summary>
        /// 经办人（CreateUserID）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_CreateUserID
		{
			get
			{
			    Yamon.Module.UCenter.DAL.UserDAL dal = new Yamon.Module.UCenter.DAL.UserDAL();
                string cacheKey = dal.CacheKeyPrefix + "NameValue_User";
                object obj=CacheHelper.Get(cacheKey);
                if (obj == null)
                {
                   obj= dal.GetAllEntityTable("UserID,TrueName").ToNameValueCollection();
                   CacheHelper.Insert(cacheKey,obj);
                }
                return (MyNameValueCollection) obj;

			}
		}




		/// <summary>
		/// 获取分页的数据实体列表
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
		public virtual List<ProductCard> GetEntityListByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="CardID,CardSN,CardNo,CardType,ValidityStart,ValidityEnd,Times,Status,Balance,MemberID,CreateTime,UpdateTime,CreateUserID";
			return GetEntityListByPage("1=1 "+ where, searchParams,order,fields, rows,page,topN,out totalRows);
		}

		/// <summary>
		/// 获取分页的数据列表DataTable
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
		public virtual DataTable GetEntityTableByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="CardID,CardSN,CardNo,CardType,ValidityStart,ValidityEnd,Times,Status,Balance,MemberID,CreateTime,UpdateTime,CreateUserID";
			return GetEntityTableByPage("1=1 "+ where, searchParams,order,fields,rows,page,topN,out totalRows);
		}

		/// <summary>
        /// 拼接查询Sql语句及参数
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="notIn">排除字段</param>
        /// <param name="arrParam">out查询参数</param>
        /// <returns>查询Sql语句</returns>
		public virtual string GetSearchSql(string notIn,out object[] arrParam)
		{
			StringBuilder sb=new StringBuilder();
			string value="";
			string value1 = "";
			string value2 = "";
			ArrayList param=new ArrayList();
			
			
			//CardSN
			if (!("," + notIn.ToLower() + ",").Contains(",cardsn,"))
			{
			value = RequestHelper.GetString("CardSN");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			       		sb.Append(" AND [`CardSN`] like ?");
			       		param.Add("%"+ arrValue[i]+"%");
			        }
			    }
			    else
			    {
			          sb.Append(" AND [`CardSN`] like ?");
			          param.Add("%"+ value+"%");
			    }
			}
			}
			
			
			//CardNo
			if (!("," + notIn.ToLower() + ",").Contains(",cardno,"))
			{
			value = RequestHelper.GetString("CardNo");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			       		sb.Append(" AND [`CardNo`] like ?");
			       		param.Add("%"+ arrValue[i]+"%");
			        }
			    }
			    else
			    {
			          sb.Append(" AND [`CardNo`] like ?");
			          param.Add("%"+ value+"%");
			    }
			}
			}
			
			
			//CardType
			if (!("," + notIn.ToLower() + ",").Contains(",cardtype,"))
			{
			value = RequestHelper.GetString("CardType");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			       		sb.Append(" AND [`CardType`] like ?");
			       		param.Add("%"+ arrValue[i]+"%");
			        }
			    }
			    else
			    {
			          sb.Append(" AND [`CardType`] like ?");
			          param.Add("%"+ value+"%");
			    }
			}
			}
			
			
			//ValidityStart
			if (!("," + notIn.ToLower() + ",").Contains(",validitystart,"))
			{
					 value1 = RequestHelper.GetString("ValidityStart_Start");
					 value2 = RequestHelper.GetString("ValidityStart_End");
			    if (!string.IsNullOrEmpty(value1))
			    {
			      sb.Append(" AND [`ValidityStart`] >=?");
			      param.Add(value1+" 00:00:00");
			    }
			    if (!string.IsNullOrEmpty(value2))
			    {
			      sb.Append(" AND [`ValidityStart`] <=?");
			      param.Add(value2+" 23:59:59");
			    }
			}
			
			
			//ValidityEnd
			if (!("," + notIn.ToLower() + ",").Contains(",validityend,"))
			{
					 value1 = RequestHelper.GetString("ValidityEnd_Start");
					 value2 = RequestHelper.GetString("ValidityEnd_End");
			    if (!string.IsNullOrEmpty(value1))
			    {
			      sb.Append(" AND [`ValidityEnd`] >=?");
			      param.Add(value1+" 00:00:00");
			    }
			    if (!string.IsNullOrEmpty(value2))
			    {
			      sb.Append(" AND [`ValidityEnd`] <=?");
			      param.Add(value2+" 23:59:59");
			    }
			}
			
			
			//Times
			if (!("," + notIn.ToLower() + ",").Contains(",times,"))
			{
				value1 = RequestHelper.GetString("Times_Start");
				value2 = RequestHelper.GetString("Times_End");
				value =RequestHelper.GetString("Times");
				if (!string.IsNullOrEmpty(value) && string.IsNullOrEmpty(value1) && string.IsNullOrEmpty(value2))
				{
				  sb.Append(" AND [`Times`] =?");
				  param.Add(value);
				}
				if (!string.IsNullOrEmpty(value1))
				{
				  sb.Append(" AND [`Times`] >=?");
				  param.Add(value1);
				}
				if (!string.IsNullOrEmpty(value2))
				{
				  sb.Append(" AND [`Times`] <=?");
				  param.Add(value2);
				}
			}
			
			
			//Status
			if (!("," + notIn.ToLower() + ",").Contains(",status,"))
			{
			value = RequestHelper.GetString("Status");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			       		sb.Append(" AND [`Status`] like ?");
			       		param.Add("%"+ arrValue[i]+"%");
			        }
			    }
			    else
			    {
			          sb.Append(" AND [`Status`] like ?");
			          param.Add("%"+ value+"%");
			    }
			}
			}
			
			
			//Balance
			if (!("," + notIn.ToLower() + ",").Contains(",balance,"))
			{
			value = RequestHelper.GetString("Balance");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			       		sb.Append(" AND [`Balance`] like ?");
			       		param.Add("%"+ arrValue[i]+"%");
			        }
			    }
			    else
			    {
			          sb.Append(" AND [`Balance`] like ?");
			          param.Add("%"+ value+"%");
			    }
			}
			}
			
			
			//CreateUserID
			if (!("," + notIn.ToLower() + ",").Contains(",createuserid,"))
			{
				value = RequestHelper.GetString("CreateUserID");
				if (!string.IsNullOrEmpty(value))
				{
				 sb.Append(" AND [`CreateUserID`]=?");
				  param.Add(value);
				}
			}
			arrParam=param.ToArray();
			return sb.ToString();

		}

		
	    public virtual ProductCard GetModelValue(ProductCard model)
        {
            return model;
        }
		/// <summary>
        /// 设置 体验卡实体(ProductCard)的显示值
        /// </summary>
        /// <param name="model"> 体验卡实体(ProductCard)</param>
        /// <returns> 体验卡实体(ProductCard)</returns>
		public virtual ProductCard GetModelShowValue(ProductCard model,bool clearValue=false)
        {
            model=GetModelValue(model);
			if (model.CardType!=null)
			{
				model.CardType_ShowValue=NameValue_CardType.Get(model.CardType.ToString());
			}
		if (model.ValidityStart!=null)
		{
			model.ValidityStart_ShowValue=((DateTime)model.ValidityStart).ToString("yyyy-MM-dd");
		}
		if (model.ValidityEnd!=null)
		{
			model.ValidityEnd_ShowValue=((DateTime)model.ValidityEnd).ToString("yyyy-MM-dd");
		}
			if (model.Status!=null)
			{
				model.Status_ShowValue=NameValue_Status.Get(model.Status.ToString());
			}
			if (model.CreateUserID!=null)
			{
				model.CreateUserID_ShowValue=NameValue_CreateUserID.Get(model.CreateUserID.ToString());
			}
			if(clearValue)
			{
				model.CardType = null;
				model.ValidityStart = null;
				model.ValidityEnd = null;
				model.Status = null;
				model.CreateUserID = null;
			}
			return model;
		}
		
		/// <summary>
        /// 设置 体验卡实体(ProductCard)的列表显示值
        /// </summary>
        /// <param name="model"> 体验卡实体(ProductCard)</param>
        /// <returns> 体验卡实体(ProductCard)</returns>
		public virtual ProductCard GetModelGridShowValue(ProductCard model){
			model=GetModelShowValue(model);
			return model;
        }

        public virtual ProductCard GetInfoByID(object id){
            ProductCard model = GetModelByID(id);
            model = GetModelShowValue(model);
            return model;
        } 


      #region 新建相关方法
		/// <summary>
        /// 设置新增入库时 体验卡实体(ProductCard)默认值
        /// </summary>
        /// <param name="model"> 体验卡实体(ProductCard)</param>
        /// <returns> 体验卡实体(ProductCard)</returns>
		public virtual ProductCard GetInsertModelValue(ProductCard model)
		{
			model.CardID =null;
			model.Status = "Normal";
			model.MemberID =RequestHelper.GetInt("MemberID");
			model.CreateTime =(DateTime.Now);
			model.UpdateTime =(DateTime.Now);
			model.CreateUserID =(CookieHelper.GetCookieInt("UserID"));
			return model;
		}		/// <summary>
        /// 设置新建页面的 体验卡实体(ProductCard)默认值
        /// </summary>
        /// <param name="model"> 体验卡实体(ProductCard)</param>
        /// <returns> 体验卡实体(ProductCard)</returns>
		public virtual ProductCard GetCreateFormDefaultValue()
		{
            ProductCard model = new ProductCard();
			model.CardType="1";
			model.ValidityStart=(DateTime.Now);
			model.ValidityEnd=(DateTime.Now.AddYears(1));
			model.Times=0;
			model.Balance=0;
			model.MemberID=RequestHelper.GetInt("MemberID");
            return model;
		}

		/// <summary>
        /// 新建数据格式验证
        /// </summary>
        /// <param name="model"> 体验卡实体(ProductCard)</param>
        public virtual void CreateFormValidator(ProductCard model)
        {
			string value="";
			
			//CardSN验证
			value = model.CardSN!=null ? model.CardSN.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("厂商代码不能为空！");
		            }
}
      #endregion

      #region 修改相关方法
		/// <summary>
        /// 设置更新入库时 体验卡实体(ProductCard)默认值
        /// </summary>
        /// <param name="model"> 体验卡实体(ProductCard)</param>
        /// <returns> 体验卡实体(ProductCard)</returns>
		public virtual ProductCard GetUpdateModelValue(ProductCard model)
		{
			return model;
		}		/// <summary>
        /// 设置编辑页面的 体验卡实体(ProductCard)默认值
        /// </summary>
        /// <param name="model"> 体验卡实体(ProductCard)</param>
        /// <returns> 体验卡实体(ProductCard)</returns>
		public virtual ProductCard GetEditFormDefaultValue(ProductCard model)
		{
			return model;
		}

		/// <summary>
        /// 编辑数据格式验证
        /// </summary>
        /// <param name="model"> 体验卡实体(ProductCard)</param>
        public virtual void EditFormValidator(ProductCard model)
        {
			string value="";
			
			//CardSN验证
			value = model.CardSN!=null ? model.CardSN.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("厂商代码不能为空！");
		            }
}
      #endregion

    }
}
