
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由亚萌智能表单代码生成工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。除非此项目不再使用代码生成器生成。
//     如果想修改此文件的方法，请在此文件的上级目录中的ProductTypeDAL重写(override)该方法。
//     如有问题联系zongeasy@qq.com
//
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.ComponentModel;
using Yamon.Framework.DBUtility;
using System.Collections;
using Yamon.Framework.Common.DataBase;
using Yamon.Framework.Common;
using Yamon.Framework.Common.IO;
using System.IO;
using System.Linq.Expressions;
using Yamon.Framework.DAL;
using Yamon.Module.Product.Entity;

namespace Yamon.Module.Product.DAL
{
    /// <summary>
    /// 商品类型实体类
    ///</summary>
    public partial class _ProductTypeDAL : BaseModelDAL<ProductType>
    {
        public _ProductTypeDAL():base("UCenter")
        {
        }

		/// <summary>
        /// 上级类别（ParentID）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_ParentID
		{
			get
			{
			    Yamon.Module.Product.DAL.ProductTypeDAL dal = new Yamon.Module.Product.DAL.ProductTypeDAL();
                string cacheKey = dal.CacheKeyPrefix + "NameValue_ProductType";
                object obj=CacheHelper.Get(cacheKey);
                if (obj == null)
                {
                   obj= dal.GetAllEntityTable_Models("ParentID,TypeName").ToNameValueCollection();
                   CacheHelper.Insert(cacheKey,obj);
                }
                return (MyNameValueCollection) obj;

			}
		}
		/// <summary>
        /// 模型（Models）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_Models
		{
			get
			{
			    return Yamon.Module.SiteManage.DAL.DictTypeDAL.GetNameValueCollectionByID("ce7932da-a2cb-4366-9c7a-6ae9aadc9e4f");

			}
		}



		/// <summary>
		/// 获取数据实体列表(模型过滤)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<ProductType> GetEntityList_Models(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] { RequestHelper.GetString("Models") };
            return GetEntityList("1=1 AND Models=? ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据实体列表(模型过滤)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<ProductType> GetAllEntityList_Models(string fields="")
        {
            return GetEntityList_Models(0,fields);
        }
		
		/// <summary>
		/// 获取分页的数据实体列表(模型过滤)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
        public virtual List<ProductType> GetEntityListByPage_Models(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			   order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] { RequestHelper.GetString("Models") };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="ProductTypeId,TypeName,OrderID,ParentID,Models";
            return GetEntityListByPage("1=1 AND Models=? "+ where, arrParams,order,fields ,rows,page,topN,out totalRows);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(模型过滤)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetEntityTable_Models(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] { RequestHelper.GetString("Models") };
            return GetEntityTable("1=1 AND Models=? ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(模型过滤)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetAllEntityTable_Models(string fields="")
        {
        	return GetEntityTable_Models(0,fields);
        }
		/// <summary>
		/// 获取分页的数据列表DataTable(模型过滤)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
        public virtual DataTable GetEntityTableByPage_Models(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			    order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] { RequestHelper.GetString("Models") };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="ProductTypeId,TypeName,OrderID,ParentID,Models";
            return GetEntityTableByPage("1=1 AND Models=? "+ where, arrParams,order,fields, rows,page,topN,out totalRows);
        }

		/// <summary>
		/// 获取分页的数据实体列表
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
		public virtual List<ProductType> GetEntityListByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="ProductTypeId,TypeName,OrderID,ParentID,Models";
			return GetEntityListByPage("1=1 "+ where, searchParams,order,fields, rows,page,topN,out totalRows);
		}

		/// <summary>
		/// 获取分页的数据列表DataTable
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
		public virtual DataTable GetEntityTableByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="ProductTypeId,TypeName,OrderID,ParentID,Models";
			return GetEntityTableByPage("1=1 "+ where, searchParams,order,fields,rows,page,topN,out totalRows);
		}

		/// <summary>
        /// 拼接查询Sql语句及参数
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="notIn">排除字段</param>
        /// <param name="arrParam">out查询参数</param>
        /// <returns>查询Sql语句</returns>
		public virtual string GetSearchSql(string notIn,out object[] arrParam)
		{
			StringBuilder sb=new StringBuilder();
			string value="";
			string value1 = "";
			string value2 = "";
			ArrayList param=new ArrayList();
			arrParam=param.ToArray();
			return sb.ToString();

		}

		
	    public virtual ProductType GetModelValue(ProductType model)
        {
            return model;
        }
		/// <summary>
        /// 设置商品类型实体(ProductType)的显示值
        /// </summary>
        /// <param name="model">商品类型实体(ProductType)</param>
        /// <returns>商品类型实体(ProductType)</returns>
		public virtual ProductType GetModelShowValue(ProductType model,bool clearValue=false)
        {
            model=GetModelValue(model);
			if (model.ParentID!=null)
			{
				model.ParentID_ShowValue=NameValue_ParentID.Get(model.ParentID.ToString());
			}
			if (model.Models!=null)
			{
				model.Models_ShowValue=NameValue_Models.Get(model.Models.ToString());
			}
			if(clearValue)
			{
				model.ParentID = null;
				model.Models = null;
			}
			return model;
		}
		
		/// <summary>
        /// 设置商品类型实体(ProductType)的列表显示值
        /// </summary>
        /// <param name="model">商品类型实体(ProductType)</param>
        /// <returns>商品类型实体(ProductType)</returns>
		public virtual ProductType GetModelGridShowValue(ProductType model){
			model=GetModelShowValue(model);
			return model;
        }

        public virtual ProductType GetInfoByID(object id){
            ProductType model = GetModelByID(id);
            model = GetModelShowValue(model);
            return model;
        } 


      #region 新建相关方法
		/// <summary>
        /// 设置新增入库时商品类型实体(ProductType)默认值
        /// </summary>
        /// <param name="model">商品类型实体(ProductType)</param>
        /// <returns>商品类型实体(ProductType)</returns>
		public virtual ProductType GetInsertModelValue(ProductType model)
		{
			model.ProductTypeId =null;
			model.Models =(RequestHelper.GetString("Models"));
			return model;
		}		/// <summary>
        /// 设置新建页面的商品类型实体(ProductType)默认值
        /// </summary>
        /// <param name="model">商品类型实体(ProductType)</param>
        /// <returns>商品类型实体(ProductType)</returns>
		public virtual ProductType GetCreateFormDefaultValue()
		{
            ProductType model = new ProductType();
			model.OrderID=0;
			model.ParentID=0;
			model.Models=(RequestHelper.GetString("Models"));
            return model;
		}

		/// <summary>
        /// 新建数据格式验证
        /// </summary>
        /// <param name="model">商品类型实体(ProductType)</param>
        public virtual void CreateFormValidator(ProductType model)
        {
			string value="";
}
      #endregion

      #region 修改相关方法
		/// <summary>
        /// 设置更新入库时商品类型实体(ProductType)默认值
        /// </summary>
        /// <param name="model">商品类型实体(ProductType)</param>
        /// <returns>商品类型实体(ProductType)</returns>
		public virtual ProductType GetUpdateModelValue(ProductType model)
		{
			model.Models =null;
			return model;
		}		/// <summary>
        /// 设置编辑页面的商品类型实体(ProductType)默认值
        /// </summary>
        /// <param name="model">商品类型实体(ProductType)</param>
        /// <returns>商品类型实体(ProductType)</returns>
		public virtual ProductType GetEditFormDefaultValue(ProductType model)
		{
			return model;
		}

		/// <summary>
        /// 编辑数据格式验证
        /// </summary>
        /// <param name="model">商品类型实体(ProductType)</param>
        public virtual void EditFormValidator(ProductType model)
        {
			string value="";
}
      #endregion

		
		/// <summary>
		/// 获取异步树商品类型实体(ProductType)列表(模型过滤)
		///</summary>
		/// <param name="nv">页面传递的参数集合</param>
        /// <param name="parentId">上级菜单</param>
        /// <param name="fields">字段列表</param>
		/// <returns></returns>
		public virtual List<ProductType> GetAsyncModelTreeList_Models(object parentId,string fields="")
		{
		  return GetAsyncTreeList_Models(parentId, fields).ToObjectList<ProductType>();
		}
		
        /// <summary>
        /// 获取异步树列表(DataTable)(模型过滤)
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="parentId">上级菜单</param>
        /// <param name="fields">字段列表</param>
        /// <returns>商品类型实体(ProductType)列表</returns>
		public virtual DataTable GetAsyncTreeList_Models(object parentId,string fields="")
		{
		if (string.IsNullOrEmpty(fields))
		{
		    fields = AllFields;
		}
		 object[] parentParam = new object[] { parentId ,RequestHelper.GetString("Models"),parentId,RequestHelper.GetString("Models")};
		 string sql = @"select {0},ChildCount from Product_ProductType as a left join
		(select ParentID as __ParentID,count(1) as ChildCount from Product_ProductType where ParentID in(
		SELECT  ProductTypeId  FROM Product_ProductType where  ParentID=? AND Models=?) group by ParentID) as b
		on a.ProductTypeId=b.__ParentID where  a.ParentID=? AND Models=?";
		  sql = string.Format(sql, fields);
		  return Db.ExecuteDataTableSqlEx(sql, parentParam);
		}


        /// <summary>
        /// 获取异步树商品类型实体(ProductType)列表
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="parentId">上级菜单</param>
        /// <param name="fields">字段列表</param>
        /// <returns>商品类型实体(ProductType)列表</returns>
		public virtual List<ProductType> GetAsyncModelTreeList(object parentId,string fields="")
		{
			return GetAsyncTreeList(parentId, fields).ToObjectList<ProductType>();
			
		}
		
		
        /// <summary>
        /// 获取异步树列表(DataTable)
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="parentId">上级菜单</param>
        /// <param name="fields">字段列表</param>
        /// <returns>DataTable</returns>
		public virtual DataTable GetAsyncTreeList(object parentId,string fields="")
		{
			if (string.IsNullOrEmpty(fields))
			{
				fields = AllFields;
			}
			object[] parentParam = new object[] { parentId,parentId };
			string sql = @"select {0},ChildCount from Product_ProductType as a left join
			(select ParentID as __ParentID,count(1) as ChildCount from Product_ProductType where ParentID in(
			SELECT  ProductTypeId  FROM Product_ProductType where  ParentID=?) group by ParentID) as b
			on a.ProductTypeId=b.__ParentID where  a.ParentID=?";
			sql = string.Format(sql, fields);
			return Db.ExecuteDataTableSqlEx(sql, parentParam);
		}
        /// <summary>
        /// 更新为树级实体列表
        /// </summary>
        /// <param name="list">实体列表</param>
        /// <returns>树级实体列表</returns>
		public List<ProductType> ModelListToTree(List<ProductType> list)
		{
			//查找父节点
			List<ProductType> rootType = list.Where(o => o.ParentID == 0).OrderBy(o => o.OrderID ).ToList();
			//递归主函数
			Action<ProductType> addChild = null;
			addChild = (info =>
				{
					var childInfo = list.Where(o => o.ParentID == info.ProductTypeId).OrderBy(o => o.OrderID );
					if (childInfo.Count() == 0)
						return;
					childInfo.All(o =>
					{
						if (info.Children == null)
						{
							info.Children=new List<ProductType>();
						}
						info.Children.Add(o);
						addChild(o);
						return true;
					});
				});
			//递归调用
			rootType.ForEach(o => { addChild(o); });
			return rootType;
		}
		
		// <summary>
        /// 获取树级实体列表
        /// </summary>
        /// <returns>树级实体列表</returns>
        public List<ProductType> GetModelTreeList()
        {
            List<ProductType> list = GetAllEntityList();
            return ModelListToTree(list);
        }

        /// <summary>
        /// 保存编辑树
        /// </summary>
        /// <param name="id"></param>
        /// <param name="targetId"></param>
        /// <param name="point"></param>
        /// <returns></returns>
        public int SaveEditTree(int id, string targetId, string point)
        {
            ProductType targetModel = GetModelByID(targetId);
            int parentId=0;
            int orderId = 0;
            if (point == "append")
            {
                parentId = targetModel.ProductTypeId ?? 0;
                orderId = 1;
            }
            else if (point == "top")
            {
                parentId = targetModel.ParentID ?? 0;
                orderId = DataConverter.ToInt(targetModel.OrderID) - 1;
            }
            else if (point == "bottom")
            {
                parentId = targetModel.ParentID ?? 0;
                orderId = DataConverter.ToInt(targetModel.OrderID) + 1;
            }
            ProductType model=new ProductType();
            model.ProductTypeId = id;
            model.OrderID = orderId;
            model.ParentID = parentId;
            return UpdateByModel(model);
        }    }
}
